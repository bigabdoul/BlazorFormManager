
interface ReCaptchaOptions {
    siteKey: string;
    version: string;
    verificationTokenName?: string;
    theme?: string;
    size?: string;
    cssSelector?: string;
    languageCode?: string;
    allowLocalHost?: boolean;
    invisible?: boolean;
}

interface ReCaptchaActivity {
    formId: string;
    message?: string;
    type?: string;
    data?: string;
}

interface ReCaptchaCallback {
    xhr?: XMLHttpRequest;
    formData?: FormData | string;
    token?: string;
    setTokenCallback?: (token: string) => void;
    widgets?: number[];
}

interface ReCaptchaConfig {
    callbacks: { [formId: string]: ReCaptchaCallback };
    scripts: {
        v1?: string;
        v2?: string;
        v3?: string;
        inserted: boolean;
        inserting: boolean;
        element?: HTMLScriptElement;
    };
}

interface QrCodeDelegate {
    clear: () => void;
    makeCode: (value: string) => void;
}


interface QrCodeOptions {
    delegate: QrCodeDelegate;
    selector: string;
}

interface DotNetObjectReference {
    invokeMethodAsync: <T>(method: string,
        arg?: any) => Promise<T>;
}

interface DotNetStaticReference {
    invokeMethodAsync: <T>(assembly: string,
        method?: string,
        arg?: any) => Promise<T>;
}

interface FormManagerInteropRef {
    invokeDotNet: <T>(formId: string,
        method?: string,
        arg?: any) => Promise<T | boolean>;
}

interface FormManagerBaseOptions {
    formId: string;
    logLevel?: number;
}

interface FormManagerOptions extends FormManagerBaseOptions {
    requireModel?: boolean;
    enhancedLoad?: boolean;
    onEnhancedLoad?: string;
    sessionStorageKey?: string;
    assembly?: string;
    requestHeaders?: IDictionary<string>;
    reCaptcha?: ReCaptchaOptions;
    qrCode?: QrCodeOptions,
    onDragStart?: string;
    onDrop?: string;
    onGetModel?: string;
    onBeforeSubmit?: string;
    onBeforeSend?: string;
    onSendFailed?: string;
    onSendSucceeded?: string;
    onUploadChanged?: string;
    onFileReaderChanged?: string;
    onFileReaderResult?: string;
    onReadFileList?: string;
    onReCaptchaActivity?: string;
    onAjaxUploadWithProgressNotSupported?: string;
    dotNetObjectReference?: DotNetObjectReference;
}

interface IDictionary<T> {
    [key: string]: T;
}

interface ImagePreviewOptions {
    autoGenerate?: boolean;
    generateFileInfo?: boolean;
    tagName?: string;
    tagClass?: string;
    tagId?: string;
    attributeName?: string;
    wrapperSelector?: string;
    width?: number;
    height?: number;
    noResize?: boolean;
    preserveAspectRatio?: boolean;
    autoGeneratedClass?: string;
    src?: string;
}

interface FileReaderOptions {
    formId: string;
    inputId?: string;
    inputFileId?: string;
    inputName?: string;
    accept?: string;
    acceptType?: string;
    multiple?: boolean;
    createObjectUrl?: boolean;
    method?: number;
    imagePreviewOptions?: ImagePreviewOptions
}

interface TargetDropOptions {
    formId: string;
    targetId: string;
    inputId: string;
    inputName: string;
    method: number;
}

interface FormDataProvider {
    formData?: FormData;
    json?: string;
    hasFiles: boolean;
}

interface FormSubmissionOptions {
    formId: string;
    requireModel?: boolean;
    reCaptcha?: ReCaptchaOptions;
    beforeSubmit?: () => Promise<boolean>;
    beforeSend?: () => Promise<boolean>;
    done?: () => void;
    fail?: (error: any) => void;
    getFormData?: () => Promise<FormDataProvider>;
}

interface FilterKeysOptions {
    targetId: string;
    eventType: string;
    callback: string;
    filter: {
        allowKeyType: number;
        blockKeyCodes: number[];
        noCallbackOnPassThrough: boolean
    }
}

interface XhrResult {
    cancel?: boolean;
    requestHeaders?: IDictionary<any>;
    response?: any;
    responseHeaders?: string;
    responseText?: string;
    responseType?: string;
    responseUrl?: string;
    responseXML?: string;
    status?: number;
    statusText?: string;
    withCredentials?: boolean;
    timeout?: number;
    extraProperties?: IDictionary<any>;
}

interface DragEventResponse {
    effectAllowed: "none" | "copy" | "copyLink" | "copyMove" | "link" | "linkMove" | "move" | "all" | "uninitialized";
    data: string;
    dataFormat: string;
    acceptedFiles: string[];
    cancel: boolean;
    storeOnly: boolean;
    maxFileCount: number;
    maxTotalSize: number;
    imagePreviewOptions: ImagePreviewOptions;
}

interface DragDropOptions {
    droppedFiles?: {
        fileCount: number;
    };
    options?: FileReaderOptions;
    dragstart?: (e: DragEvent) => void;
    dragover?: (e: DragEvent) => void;
    drop?: (e: DragEvent) => void;
}

interface DragDropEnableOptions {
    formId: string;
    inputName: string;
    dropTargetId: string;
    dropEffect: string;
    effectAllowed?: string;
}

interface DomDataTransfer {
    effectAllowed?: number;
    dropEffect?: number;
    files?: InputFileInfo[];
}

interface DomDragEventArgs {
    dataTransfer: {};
}

interface ImageSize {
    width?: number;
    height?: number;
}

interface InputFileInfo {
    lastModifiedDate?: number;
    name?: string;
    size?: number;
    type?: string;
    dimensions?: ImageSize;
}

interface ProcessedFile {
    id?: string;
    name?: string;
    files?: File[] | FileList
}

interface ProcessedFileConfig {
    inputs: Array<ProcessedFile>
}

interface LogLevelOptions {
    formId: string;
    logLevel: number;
}

interface FunctionResult {
    succeeded: boolean;
    error: string;
    code: number
}

interface DragDropTargetOptions {
    formId: string;
    targetId: string;
}

interface DragDropInputFilesOptions {
    formId: string;
    targetId: string;
    inputId: string;
    inputName: string;
    method: number
}

interface IBlazorFormManager {
    init: (options: FormManagerOptions) => boolean;
    destroy: (formId: string) => void;
    setLogLevel: (options: LogLevelOptions) => boolean;
    updateOptions: (options: FormManagerOptions) => boolean;
    raiseAjaxUploadWithProgressNotSupported: (formId: string) => Promise<boolean>;
    submitForm: (formId: string) => boolean;
    localStorageSetItem: (key: string, value: string) => void;
    localStorageRemoveItem: (key: string) => void;
    localStorageGetItem: (key: string) => string;
    readInputFiles: (options: FileReaderOptions) => Promise<FunctionResult>;
    deleteProcessedFileList: (options: { formId: string; inputId: string }) => boolean;
    dragDropEnable: (options: DragDropEnableOptions) => Promise<FunctionResult>;
    dragDropDisable: (options: DragDropTargetOptions) => FunctionResult;
    dragDropRemoveFileList: (options: DragDropTargetOptions) => boolean;
    dragDropInputFilesOnTarget: (options: DragDropInputFilesOptions) => Promise<FunctionResult>;
    filterKeys: (options: FilterKeysOptions) => boolean;
    addEventListener: (targetId: string, eventType: string, callback: string) => boolean;
    removeEventListener: (targetId: string, eventType: string) => boolean;
    getForms: () => IDictionary<FormManagerOptions>;
    resetRecaptcha: (formId: string, options: ReCaptchaOptions) => void;
}

interface IQuillEditor {

}

interface QuillBaseOptions {
    theme?: "snow" | "bubble";
    version?: string;
}

interface QuillInstallOptions extends QuillBaseOptions {
    scriptUrl?: string;
    styleUrl?: string;
}

interface QuillOptions extends QuillBaseOptions {
    noinit?: boolean;
    onready?: (editor: IQuillEditor) => void;
    formId?: string;
    bounds?: HTMLElement | string;
    debug?: "info" | "warn" | "error";
    formats?: {
        inline?: "background" | "bold" | "color" | "font" | "code" | "italic" | "link" | "size" | "strike" | "script" | "underline";
        block?: "blockquote" | "header" | "indent" | "list" | "align" | "direction" | "code-block";
        embeds?: "formula" | "image" | "video";
    };
    modules?: {
        toolbar?: string | boolean | Array<Array<any>>;
        history?: {
            delay?: number;
            userOnly?: boolean;
        };
        syntax?: boolean;
    };
    placeholder?: string;
    readOnly?: boolean;
}

/** Material Design Bootstrap 5 options. */
interface MDBootstrapOptions {
    /** The form identifier. */
    formId: string;
    /** The CSS query selector for form-outline inputs. The default value is '.form-outline'. */
    selector?: string;
    /** true to limit selector to the identified form; otherwise, false. */
    scoped?: boolean;
}
