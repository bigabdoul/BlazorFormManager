@inherits AutoFormEntryBase

@if (Metadata != null)
{
    var meta = Metadata;
    var attr = meta.Attribute;
    var culture = Form?.Culture;
    var displayName = meta.GetDisplayName(culture);
    var descr = meta.GetDisplayString(attr.Description, culture);
    var required = meta.IsRequired;
    var element = attr.GetElement(out var elementType);
    var editor = attr.RichText || true == Form?.EnableRichText && element.EqualsIgnoreCase("textarea");
    var wrapperClass = $"{(editor ? "rich-text-editor mb-3" : "form-floating")} {element} {elementType}";
    var placeh = meta.GetDisplayString(attr.Placeholder, culture);
    var placeholder = editor ? null : placeh ?? meta.GetDisplayString(attr.Prompt, culture) ?? descr;
    if (!editor && placeholder.IsBlank())
    {
        placeholder = displayName;
    }
    var attributes = GetAttributes
    (
        ("class", attr.InputCssClass),
        ("placeholder", placeholder),
        ("title", descr)
    );
    <div class="@wrapperClass">
        @if (editor)
        {
            <QuillEditor Target="@("#" + Id)" />
            var labelAttr = GetAttributes(("class", meta.IsRequired ? "required" : null));
            <label @attributes="@labelAttr">@displayName</label>
        }
        <AutoInputBase @ref="autoInputBaseRef" @bind-Value="Value" Id="@Id" Name="@Name" Metadata="meta" Model="Model" PropertyNavigationPath="@PropertyNavigationPath" @attributes="attributes">
            @ChildContent
        </AutoInputBase>
        @if (!editor)
        {
            var labelAttr = GetAttributes
            (
                ("for", editor ? null : autoInputBaseRef?.Id),
                ("class", meta.IsRequired ? "required" : null)
            );
            <label @attributes="@labelAttr">@(placeh ?? displayName)</label>
        }
        @if (editor)
        {
            <HelpText Description="@descr" />
        }
    </div>
    @*<AutoValidationMessage Model="Model" Property="@meta.PropertyInfo.Name" />*@
}

@code {
    private AutoInputBase? autoInputBaseRef;
    [Parameter] public RenderFragment? ChildContent { get; set; }
}
