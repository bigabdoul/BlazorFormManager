@inherits AutoFormEntryBase

@if (Metadata != null)
{
    var meta = Metadata;
    var attr = meta.Attribute;
    var culture = Form?.Culture;
    var mdb = Form?.MDBootstrap == true;
    var displayName = meta.GetDisplayName(culture);
    var descr = meta.GetDisplayString(attr.Description, culture);
    var required = meta.IsRequired;
    var element = attr.GetElement(out var elementType);
    var editor = attr.RichText || (true == Form?.EnableRichText) && element.EqualsIgnoreCase("textarea");
    var marginbottom = attr.Icon.IsNotBlank() ? string.Empty : descr.IsNotBlank() ? "mb-1" : "mb-3";
    var placeh = meta.GetDisplayString(attr.Placeholder, culture);
    var placeholder = editor ? null : placeh ?? meta.GetDisplayString(attr.Prompt, culture) ?? descr;
    var wrapperClass = $"{(editor ? "rich-text-editor" : string.Empty)} {marginbottom} {element} {elementType}".Trim();
    var isSelect = element.EqualsIgnoreCase("select");

    if (!editor)
    {
        wrapperClass += !mdb || isSelect ? " form-floating" : " form-outline";
        if (placeholder.IsBlank()) placeholder = displayName;
    }

    var attributes = GetAttributes
    (
        ("class", attr.InputCssClass),
        ("placeholder", !mdb || isSelect ? placeholder : null),
        //("data-mdb-select-init", mdb && isSelect ? true : null),
        ("title", descr)
    );
    <div @attributes=@GetAttributes(("class", wrapperClass), ("data-mdb-input-init", !mdb || isSelect ? null : true))>
        @if (editor)
        {
            <QuillEditor Target="@($"#{Id}")" Name="@meta.PropertyInfo.Name" OnChange="HandleQuillTextChange" />
            var labelAttr = GetAttributes(("class", meta.IsRequired ? "required" : null));
            <label @attributes="@labelAttr">@displayName</label>
        }
        <AutoInputBase @bind-Value="Value" Id="@Id" Name="@Name" Metadata="meta" Model="Model" PropertyNavigationPath="@PropertyNavigationPath" @attributes="attributes">
            @ChildContent
        </AutoInputBase>
        @if (!editor)
        {
            var labelAttr = GetAttributes
            (
                ("for", Id),
                ("class", "form-label" + (meta.IsRequired ? " required" : string.Empty))
            );
            placeh ??= displayName;
            <label @attributes="@labelAttr">
                @if (Form?.FloatingIcon == true)
                {
                    <ContentIconText Icon="@attr.Icon" Text="@placeh" />
                }
                else
                {
                    @placeh
                }
            </label>
        }
        @if (editor)
        {
            <HelpText Description="@descr" />
        }
    </div>
    @*<AutoValidationMessage Model="Model" Property="@meta.PropertyInfo.Name" />*@
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    void HandleQuillTextChange(string? text)
    {
        if (Form is null) return;
        if (Form.OnRichTextChanged.HasDelegate)
        {
            Form.RichTextChanged(PropertyNavigationPath, text);
        }
        else
        {
            //Form.SetModelValue(PropertyNavigationPath, text);
        }
    }
}
