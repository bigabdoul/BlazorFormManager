@typeparam TModel
@inherits AutoEditFormBase<TModel>

@if (EditContext != null)
{
	<div class="auto-edit-form">
		@if (Net8OrGreater)
		{
			<EditForm EditContext="EditContext"
					  OnValidSubmit="HandleValidSubmit"
					  OnInvalidSubmit="HandleInvalidSubmit"
					  Enhance="Enhance"
					  FormName="@(FormName ?? FormId)"
					  id="@FormId" action="@FormAction" method="@FormMethod" enctype="@EncodingType"
					  @attributes="AdditionalAttributes">
                <CascadingValue Value="this">
                    @* @if (EnableAntiforgeryToken)
                    {
						<Microsoft.AspNetCore.Components.Forms.AntiforgeryToken />
                    } *@
					@*
						This issues a cascaded parameter to instances of the AutoInputBase component
						so that it can access FormManagerBase-related members, such as OptionsGetter, etc.
					*@
					<AutoEditFormCascade TModel="TModel" DisplayGroups="DisplayGroups" />
				</CascadingValue>
			</EditForm>
		}
		else
		{
			<EditForm EditContext="EditContext"
				OnValidSubmit="HandleValidSubmit"
				OnInvalidSubmit="HandleInvalidSubmit"
				id="@FormId" action="@FormAction" method="@FormMethod" enctype="@EncodingType"
				@attributes="AdditionalAttributes">
				<CascadingValue Value="this">
					@if (EnableAntiforgeryToken && AntiForgeryToken.IsNotBlank())
					{
						@((MarkupString)AntiForgeryToken!)
					}
					<AutoEditFormCascade TModel="TModel" DisplayGroups="DisplayGroups" />
				</CascadingValue>
			</EditForm>
		}
		@if (EnableProgressBar && IsRunning)
		{
			<Html5ProgressBar Progress="(Progress ?? (BlazorFormManager.IO.ProgressChangedEventArgs?)ReadProgress)"
				StatusMessage="@Status"
				CanCancel="CanAbortUpload"
				OnCancelRequested="() => AbortRequested = true"
				ElapsedMilliseconds="Stopwatch?.ElapsedMilliseconds"
				HideCancelButton="IsReadingFileList"
				HideElapsedMilliseconds="IsReadingFileList" />
			if (IsReadingFileList)
			{
				<Html5ProgressBar Progress="ReadFileListProgress"
					StatusMessage="@ReadFileListStatus"
					OnCancelRequested="() => AbortRequested = true"
					ElapsedMilliseconds="Stopwatch?.ElapsedMilliseconds" />
			}
		}
		@if (IsDebug)
		{
			<FormDebugInfo Model="XhrResult" Options="DebugOptions" />
			<UnsupportedBrowserProperties Model="AjaxUploadNotSupported?.ExtraProperties" />
		}
	</div>
}
else
{
	<div class="alert alert-danger">
		<h1 class="lead">
			The parameter <code>BlazorFormManager.Components.Forms.FormManagerBase.EditContext</code> is undefined!
		</h1>
		<code>
			Source: BlazorFormManager.Components.Forms.AutoEditForm&lt;TModel&gt;
		</code>
	</div>
}