@if (Metadata != null)
{
    var items = Metadata.Items.Where(g => !g.Attribute.IsIgnored()).ToArray();

    if (items.Length == 0)
    {
        return;
    }

    var pathPrefix = string.Empty;
    var isNested = PropertyNavigationPath.IsNotBlank();

    if (isNested)
    {
        pathPrefix = $"{PropertyNavigationPath}.";    
    }

    string? currentId = null;
    bool? generateNameAttribute = Form?.GenerateInputNameAttribute;

    // first render all hidden inputs
    foreach (var data in items.Where(i => i.Attribute.Is("hidden")))
    {
        var path = pathPrefix + data.PropertyInfo.Name;
        var (id, name) = data.GenerateIdAndName(Form?.RenderOptions, path, currentId, generateNameAttribute);

        if (data.Attribute.InputName.IsNotBlank())
            name = data.Attribute.InputName!;
        else
            name = path;

        var attrs = GetAttributes(("id", id), ("name", name), ("value", data.GetValue(Model)));
        <input type="hidden" @attributes="attrs" />
    }

    // render all other inputs/elements
    items = items.Where(i => false == i.Attribute.Is("hidden")).ToArray();

    if (items.Length > 0)
    {
        var group = Metadata;
        var showGroupName = group.ShowName || group.Icon.IsNotBlank();
        var fieldsetClass = $"display-group {group.Name.SanitizedName()}{(isNested ? " nested" : "")}";

        if (isNested)
        {
             <div class="@fieldsetClass">
                @if (showGroupName)
                {
                    <h4 class="display-group-title">
                        <ContentIconText Icon="@group.Icon" Text="@group.Name" />
                    </h4>
                }
                <FormDisplayGroupBody Items="items" Model="Model" 
                    PropertyNavigationPath="@PropertyNavigationPath" CssClass="@group.CssClass" />
            </div>
        }
        else
        {
            <fieldset class="@fieldsetClass">
                @if (showGroupName)
                {
                    <legend class="display-group-title">
                        <ContentIconText Icon="@group.Icon" Text="@group.Name" />
                    </legend>
                }
                <FormDisplayGroupBody Items="items" Model="Model" 
                    PropertyNavigationPath="@PropertyNavigationPath" CssClass="@group.CssClass" />
            </fieldset>
        }
    }
}

@code {
    [Parameter] public FormDisplayGroupMetadata? Metadata { get; set; }
    [Parameter] public object? Model { get; set; }
    [Parameter] public string? PropertyNavigationPath { get; set; }
    [CascadingParameter] protected FormManagerBase? Form { get; set; }
}
