@implements IDisposable

<CascadingValue Value="this">
    @if (BeforeDropArea != null)
    {
        @BeforeDropArea
    }
    <div class="blazor-form-manager-drag-drop-zone">
        <div class="bfm-ddz-message">
            <span class="file-icon"></span>
            <p>@_waterMark</p>
            <p class="bfm-ddz-error">File not supported.</p>
        </div>
        <div class="bfm-ddz-loader"></div>
        <div class="bfm-ddz-errors-container">
            <ul></ul>
        </div>
        <input type="file" id="@_inputId" class="bfm-ddz" @onchange="HandleInputFileChanged" accept="@_accept" multiple="@Microsoft.AspNetCore.Components.BindConverter.FormatValue(_multiple)" />
        @if (!_multiple)
        {
            <button type="button" class="bfm-ddz-clear" @onclick="async () => await DeleteFileListAsync()">Remove</button>
        }
        <div class="bfm-ddz-preview">
            <span class="bfm-ddz-render"></span>
            <div class="bfm-ddz-infos">
                <div class="bfm-ddz-infos-inner">
                    <p class="bfm-ddz-filename"><span class="file-icon"></span> <span class="bfm-ddz-filename-inner"></span></p>
                    <p class="bfm-ddz-infos-message">Drag and drop or click to replace</p>
                </div>
            </div>
        </div>
    </div>

    @if (AfterDropArea != null)
    {
        @AfterDropArea
    }
</CascadingValue>

@code {
    #region private fields / properties

    private string _inputId = string.Empty;
    private string? _waterMark;
    private string? _accept;
    private bool _multiple;
    private bool _hasEventListeners;
    private string Id => $"{PropertyName}{typeof(DragDropArea).Name}";
    private string MultipleClass => _multiple ? " multiple" : string.Empty;
    private FormManagerBase? FormManagerRef => (Form ?? Manager);
    [CascadingParameter] private FormManagerBase? Form { get; set; }

    #endregion

    #region public parameters / methods

    /// <summary>
    /// Gets or sets the name of the property that was decorated with a custom attribute
    /// of type <see cref="InputFileAttribute"/> or descending from it.
    /// </summary>
    [Parameter] public string PropertyName { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the text displayed when there are no selected files.
    /// </summary>
    [Parameter] public string? WatermarkText { get => _waterMark; set => _waterMark = value; }

    [Parameter] public RenderFragment? BeforeDropArea { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? AfterDropArea { get; set; }

    [Parameter] public FormManagerBase? Manager { get; set; }

    /// <summary>
    /// Indicates whether the current drag and drop area has event listeners.
    /// </summary>
    public bool HasEventListeners => _hasEventListeners;

    /// <summary>
    /// Deletes the files that have been previously dropped onto the current area.
    /// </summary>
    /// <returns></returns>
    public async ValueTask<bool> DeleteFileListAsync()
    {
        if (FormManagerRef != null)
            await FormManagerRef.DeleteDragDropFileListAsync(Id);
        return false;
    }

    /// <summary>
    /// Enables drag and drop support for the current area.
    /// </summary>
    /// <returns></returns>
    public async Task<bool> AddEventListenersAsync()
    {
        if (!_hasEventListeners && FormManagerRef != null)
        {
            var result = await FormManagerRef.RegisterFileDragDropTargetAsync(Id, PropertyName, _inputId);

            if (result.Succeeded)
            {
                _hasEventListeners = true;
                return true;
            }
        }
        return false;
    }

    /// <summary>
    /// Disables drag and drop support for the current area.
    /// </summary>
    /// <returns></returns>
    public async Task<bool> RemoveEventListenersAsync()
    {
        if (_hasEventListeners && FormManagerRef != null)
        {
            var result = await FormManagerRef.UnregisterFileDragDropTargetAsync(Id);
            if (result.Succeeded)
            {
                _hasEventListeners = false;
                return true;
            }
        }
        return false;
    }

    #endregion

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Form == null && Manager == null)
        {
            throw new InvalidOperationException(
                $"{typeof(DragDropArea)} component must be contained in a " +
                $"{typeof(FormManagerBase)} parent component or have an initialized " +
                $"{nameof(Manager)} parameter.");
        }

        _inputId = PropertyName.GenerateId();
        InitializeAttributes();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AddEventListenersAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    #region private methods

    private void InitializeAttributes()
    {
        var attr = FormManagerRef?.GetFileCapableAttribute(PropertyName);

        if (attr != null)
        {
            _accept = attr.Accept ?? string.Empty;
            _multiple = attr.Multiple == true;
            _waterMark = attr.Prompt;
        }

        if (string.IsNullOrWhiteSpace(_waterMark))
            _waterMark = "Drag and drop files here";
    }

    private async Task HandleInputFileChanged(ChangeEventArgs e)
    {
        if (!_hasEventListeners) return;

        if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            await DeleteFileListAsync();
        }
        else if (FormManagerRef != null)
        {
            await FormManagerRef.DropInputFilesOnTargetAsync(_inputId, Id, PropertyName);
        }
    }

    void IDisposable.Dispose()
    {
        _ = DeleteFileListAsync();
        _ = RemoveEventListenersAsync();
    }

    #endregion
}
