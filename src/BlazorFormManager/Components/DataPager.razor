@using BlazorFormManager.Collections
 
@if (_pagination.IsMultiPage)
{
    var prevPage = 0;
    <nav class="data-pager" aria-label="Data navigation">
        <ul class="pagination pagination-@(Size.ToString().ToLower()) justify-content-@(Alignment.ToString().ToLower())">
            @foreach (var n in _pagination.Links)
            {
                if (n != prevPage + 1)
                {
                    <li class="page-item"><span class="px-1">...</span></li>
                }
                <li class="@ActivePageItem(n)">
                    <button type="button" class="page-link" @onclick="() => _pagination.CurrentPage = n">@n</button>
                </li>
                prevPage = n;
            }
        </ul>
    </nav>
}

@code {
    #region private

    private readonly Pagination _pagination = new Pagination();
    private string ActivePageItem(int n) => $"page-item{(_pagination.IsActive(n) ? " active" : string.Empty)}";

    #endregion

    #region parameters

    /// <summary>
    /// Gets or sets the total number of items. Should not be less than 0.
    /// </summary>
    [Parameter] public int TotalItemCount { get; set; }

    /// <summary>
    /// Gets or sets the maximum number of items per page. Should not be less than 1.
    /// </summary>
    [Parameter] public int PageSize { get; set; } = 5;

    /// <summary>
    /// Gets or sets a one-based integer representing the current page number.
    /// </summary>
    [Parameter] public int CurrentPage { get; set; } = 1;

    /// <summary>
    /// Gets or sets the event callback to invoke when the current page or related property changes.
    /// </summary>
    [Parameter] public EventCallback<int> OnPageChange { get; set; }

    /// <summary>
    /// Gets or sets the horizontal alignment of the pager.
    /// </summary>
    [Parameter] public JustifyContent Alignment { get; set; }

    /// <summary>
    /// Gets or sets the size of this DataPager component. 
    /// Supported values are <see cref="ComponentSize.Sm"/> and <see cref="ComponentSize.Lg"/>.
    /// By default, any other size has no effect. The default is <see cref="ComponentSize.Md"/>.
    /// </summary>
    [Parameter] public ComponentSize Size { get; set; } = ComponentSize.Md;

    #endregion

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (PageSize <= 1)
            PageSize = 1;
        if (CurrentPage < 1)
            CurrentPage = 1;

        _pagination.Initialize(OnPageChange, TotalItemCount, PageSize, CurrentPage);
    }
}
