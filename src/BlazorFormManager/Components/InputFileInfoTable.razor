@using BlazorFormManager.IO

@if (Files?.Count > 0)
{
    var row = _itemStart + 1;
    var totalSize = 0D;
    <div class="input-file-info-table">
        <div class="table-responsive mb-1 border">
            <table class="table table-light table-striped table-hover table-sm table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>#</th>
                        <th scope="col" class="file-name" title="File name">Name</th>
                        <th scope="col" class="file-size" title="File size">Size</th>
                        <th scope="col" class="file-size" title="Width and Height">Dimensions</th>
                        <th scope="col" class="file-type" title="File type">Type</th>
                        <th scope="col" class="file-date" title="Last modified date">Last modified</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var f in Files)
                    {
                        totalSize += f.Size;
                        <tr>
                            <th scope="row">@(row++)</th>
                            <td class="file-name">@f.Name</td>
                            <td class="file-size">@f.SizeAsString</td>
                            <td class="file-size">@f.Dimensions</td>
                            <td class="file-type">
                                <i class="@GetIcon(f)"></i> <span class="file">@f.Type</span>
                            </td>
                            <td class="file-date">@f.LastModifiedDateAsString</td>
                        </tr>
                    }
                </tbody>
                @if (row > 2)
                {
                    <tfoot>
                        <tr>
                            <td colspan="2" class="text-right">Total size</td>
                            <td class="text-right"><strong>@InputFileInfo.FileSizeToString(totalSize)</strong></td>
                            <td colspan="3"></td>
                        </tr>
                    </tfoot>
                }
            </table>
        </div>
        <DataPager TotalItemCount="FileCount" PageSize="PageSize" OnPageChange="HandlePageChange" Size="ComponentSize.Sm"/>
    </div>
}

@code {
    [Parameter] public IReadOnlyCollection<InputFileInfo> Files { get; set; }
    [Parameter] public int FileCount { get; set; }
    [Parameter] public int PageSize { get; set; } = 20;
    [Parameter] public EventCallback<int> OnPageChange { get; set; }

    private int _itemStart;

    private string GetIcon(InputFileInfo file)
    {
        if (file.IsImage) return "fas fa-image";
        if (file.IsVideo) return "fas fa-video";
        if (file.IsArchive) return "fas fa-file-archive";
        if (file.HasExtension(".pdf")) return "fas fa-file-pdf";
        if (file.HasExtension(".xls", ".xlsx")) return "fas fa-file-excel";
        if (file.HasExtension(".doc", ".docx")) return "fas fa-file-word";
        if (file.HasExtension(".mdb", ".accdb")) return "fas fa-file-access";
        if (file.HasExtension(".ppt", ".pptx", ".pps", ".ppsx", ".ppsm", ".pptm", ".pot", ".potx", "potm", ".ppa", ".ppam", ".odp")) return "fas fa-file-powerpoint";

        return "fas fa-file";
    }

    private void HandlePageChange(int page)
    {
        _itemStart = PageSize * (page - 1);
        if (OnPageChange.HasDelegate)
            OnPageChange.InvokeAsync(page);
    }
}
