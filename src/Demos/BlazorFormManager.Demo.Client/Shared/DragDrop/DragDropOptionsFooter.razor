
<button type="button" class="@EventListenersClass" title="@EventListenersTitle"
        @onclick="HandleEventListeners" disabled="@NoDropArea">
    @if (Disabled)
    {
        <span><i class="fas fa-bolt" aria-hidden="true"></i> Enable drag &amp; drop</span>
    }
    else
    {
        <span><i class="fas fa-minus-circle" aria-hidden="true"></i> Disable drag &amp; drop</span>
    }
</button>

@if (OptionsManager?.Model?.Files.Count > 0)
{
    <button type="button" class="btn btn-sm btn-secondary ml-2" title="Clear drag & drop store, and file list"
            @onclick="DeleteFileList" disabled="@NoDropArea">
        <span><i class="fas fa-trash" aria-hidden="true"></i> Clear</span>
    </button>
}

@if (true == Manager?.IsReadingFiles)
{
    <button type="button" class="btn btn-secondary ml-2" title="Abort file reading operation"
            @onclick="() => Manager.AbortRequested = true" disabled="@Manager.AbortRequested">
        <span><i class="fas fa-stop" aria-hidden="true"></i> Abort!</span>
    </button>
}

@code {
    [CascadingParameter] private DragDropArea DropArea { get; set; }
    [CascadingParameter] private FormManagerBase Manager { get; set; }
    [CascadingParameter] private DragDropOptionsManager OptionsManager { get; set; }

    private bool NoDropArea => DropArea == null;
    private bool Disabled => true == OptionsManager?.Model?.Disabled;
    private string EventListenersClass => $"btn btn-sm btn-{(Disabled ? "warning" : "success")}";
    private string EventListenersTitle => $"{(Disabled ? "Re-enables" : "Disables")} drag and drop support";

    private async Task DeleteFileList()
    {
        await DropArea.DeleteFileListAsync();
        OptionsManager.Model.Files.Clear();
        InvokeStateChanged();
    }

    private async Task HandleEventListeners()
    {
        if (!Disabled)
        {
            await DropArea.DeleteFileListAsync();
            if (await DropArea.RemoveEventListenersAsync())
            {
                OptionsManager.Model.Disabled = true;
                OptionsManager.Model.Files.Clear();
                InvokeStateChanged();
            }
        }
        else if (await DropArea.AddEventListenersAsync())
        {
            OptionsManager.Model.Disabled = false;
            InvokeStateChanged();
        }
    }

    private void InvokeStateChanged()
    {
        StateHasChanged();
        OptionsManager.NotifyStateChanged();
    }
}
